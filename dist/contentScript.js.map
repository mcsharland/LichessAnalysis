{"version":3,"file":"contentScript.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,CAAC;AACS","sources":["webpack://chess-analysis/webpack/bootstrap","webpack://chess-analysis/webpack/runtime/make namespace object","webpack://chess-analysis/./src/contentScript.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const parser = (pgn) => {\n    const removeParentheses = (str) => {\n        let result = \"\";\n        let level = 0;\n        let inParentheses = false;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === \"(\") {\n                level++;\n                inParentheses = true;\n            }\n            else if (str[i] === \")\") {\n                level--;\n                if (level === 0) {\n                    inParentheses = false;\n                }\n            }\n            else if (!inParentheses) {\n                result += str[i];\n            }\n        }\n        return result;\n    };\n    return removeParentheses(pgn)\n        .split(/\\s+/) // split by space\n        .filter((str) => /^(?:\\d+\\.+)?(?:[NBRKQ]?[a-h]?[1-8]?x?[a-h][1-8](?:=[QNBR])?|O-O(?:-O)?)[+#]?$/.test(str)) // filter valid moves\n        .join(\"_\")\n        .replace(/#$/, \"\"); // remove a trailing '#' to ensure board flip works\n};\nconst disableButton = (button) => {\n    if (button) {\n        button.disabled = true;\n    }\n};\nconst hijackButton = (button) => {\n    if (button == null) {\n        console.error(\"Null button\");\n        throw new Error(\"button not found\");\n    }\n    button.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        lichess();\n        return false;\n    }, true);\n    button.disabled = false;\n    if (button.getAttribute(\"aria-label\") === \"Game Review\") {\n        const parent = button.parentElement;\n        const label = parent === null || parent === void 0 ? void 0 : parent.querySelector(\".game-over-review-button-label\");\n        if (label) {\n            label.textContent = \"Lichess Analysis\";\n        }\n        // warning first button also contains this class, no guaranteed unique classes\n    }\n    else if (button.classList.contains(\"cc-button-full\")) {\n        button.innerHTML =\n            '<span aria-hidden=\"true\" class=\"icon-font-chess best cc-icon-large cc-button-icon\"></span> <span class=\"cc-button-one-line\">Lichess</span>';\n    }\n};\nfunction handleButton(button) {\n    disableButton(button);\n    hijackButton(button);\n}\nfunction lichess() {\n    const shareButton = document.querySelector(`button[aria-label=\"Share\"]`);\n    if (!shareButton) {\n        alert(\"Error: Unable to find PGN...\");\n        return;\n    }\n    const pgnObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            if (mutation.type === \"childList\") {\n                mutation.addedNodes.forEach((node) => {\n                    var _a, _b, _c, _d, _e;\n                    if (node instanceof HTMLElement) {\n                        const PGNElement = node.querySelector(`[pgn]`);\n                        if (PGNElement) {\n                            pgnObserver.disconnect();\n                            const closeButton = node.querySelector(`button[aria-label=\"Close\"]`);\n                            const black = document.getElementsByClassName(\"board flipped\").length > 0;\n                            const moveData = (_d = (_c = (_b = (_a = document\n                                .querySelector(\"wc-simple-move-list\")) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(\"selected\")[0]) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.dataset.node) === null || _d === void 0 ? void 0 : _d.split(\"-\");\n                            let move = moveData && moveData[0] === \"0\"\n                                ? String(parseInt(moveData[1], 10) + 1)\n                                : null;\n                            closeButton === null || closeButton === void 0 ? void 0 : closeButton.click();\n                            try {\n                                const PGNData = PGNElement.getAttribute(\"pgn\");\n                                if (!PGNData) {\n                                    throw new Error(\"PGN not found\");\n                                }\n                                const formatted = parser(PGNData);\n                                const link = `https://lichess.org/analysis/pgn/` +\n                                    formatted +\n                                    (black ? \"?color=black\" : \"\") +\n                                    `#${move}`;\n                                (_e = window.open(link, \"_blank\")) === null || _e === void 0 ? void 0 : _e.focus();\n                            }\n                            catch (error) {\n                                alert(\"Error: Something went wrong...\");\n                                throw new Error(\"Couldn't open new page\");\n                            }\n                        }\n                    }\n                });\n            }\n        });\n    });\n    shareButton.click();\n    pgnObserver.observe(document.body, {\n        childList: true,\n        subtree: true,\n    });\n}\nfunction isLiveGame() {\n    return (window.location.hostname.includes(`chess.com`) &&\n        window.location.pathname.startsWith(`/game/`));\n}\n(function () {\n    function handlePageLoad() {\n        if (isLiveGame()) {\n            if (!window.gameEndObserver) {\n                initializeObserver();\n            }\n            requestAnimationFrame(checkSideButton);\n        }\n        else {\n            if (window.gameEndObserver) {\n                window.gameEndObserver.disconnect();\n                window.gameEndObserver = null;\n            }\n        }\n    }\n    // @ts-ignore\n    window.navigation.addEventListener(\"currententrychange\", handlePageLoad);\n    handlePageLoad();\n    const sideBarIdentifier = \".cc-button-component.cc-button-primary.cc-button-full:is(.cc-button-xx-large, .cc-button-large)\";\n    const popUpIdentifier = `button[aria-label=\"Game Review\"`;\n    // Check for opening finished game\n    function checkSideButton() {\n        const sideBarButton = document.querySelector(sideBarIdentifier);\n        if (sideBarButton) {\n            handleButton(sideBarButton);\n            return;\n        }\n        requestAnimationFrame(checkSideButton);\n    }\n    function initializeObserver() {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                // Redundancy because of different behavior with games <5 moves\n                if (mutation.type === \"childList\") {\n                    mutation.addedNodes.forEach((node) => {\n                        if (node instanceof HTMLElement) {\n                            const popUpButton = node.querySelector(`button[aria-label=\"Game Review\"`);\n                            if (popUpButton) {\n                                handleButton(popUpButton);\n                                // Additional check for when game ends\n                                const sideBarButton = document.querySelector(sideBarIdentifier);\n                                if (sideBarButton) {\n                                    handleButton(sideBarButton);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (mutation.type === \"attributes\" &&\n                    mutation.target instanceof HTMLElement) {\n                    const popUpButton = mutation.target.querySelector(popUpIdentifier);\n                    if (popUpButton) {\n                        handleButton(popUpButton);\n                        // Additional check for when game ends\n                        const sideBarButton = document.querySelector(sideBarIdentifier);\n                        if (sideBarButton) {\n                            handleButton(sideBarButton);\n                        }\n                    }\n                }\n            });\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n        });\n        window.gameEndObserver = observer;\n    }\n})();\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\n    if (msg.type === \"live\") {\n        lichess();\n        sendResponse({ success: true });\n    }\n    return true;\n});\nexport {};\n"],"names":[],"sourceRoot":""}