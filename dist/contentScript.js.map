{"version":3,"file":"contentScript.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://chess-analysis/./src/contentScript.ts"],"sourcesContent":["\"use strict\";\nconst parser = (pgn) => {\n    const removeParentheses = (str) => {\n        let result = '';\n        let level = 0;\n        let inParentheses = false;\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '(') {\n                level++;\n                inParentheses = true;\n            }\n            else if (str[i] === ')') {\n                level--;\n                if (level === 0) {\n                    inParentheses = false;\n                }\n            }\n            else if (!inParentheses) {\n                result += str[i];\n            }\n        }\n        return result;\n    };\n    return removeParentheses(pgn)\n        .split(/\\s+/) // split by space\n        .filter(str => /^(?:\\d+\\.+)?(?:[NBRKQ]?[a-h]?[1-8]?x?[a-h][1-8](?:=[QNBR])?|O-O(?:-O)?)[+#]?$/.test(str)) // filter valid moves\n        .join(\"_\")\n        .replace(/#$/, ''); // remove a trailing '#' to ensure board flip works\n};\nconst disableButton = (button) => {\n    if (button) {\n        button.disabled = true;\n    }\n};\n// maybe not needed but these ensure theres no unintended behavior\nlet isLichessInProgress = false;\nlet ready = false;\nconst hijackButton = (button) => {\n    var _a;\n    if (button) {\n        const clonedButton = button.cloneNode(true);\n        (_a = button.parentNode) === null || _a === void 0 ? void 0 : _a.replaceChild(clonedButton, button);\n        clonedButton.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n            if (!isLichessInProgress) {\n                isLichessInProgress = true;\n                lichess();\n            }\n        });\n        clonedButton.disabled = false;\n        if (button.dataset.cy === \"sidebar-game-review-button\") {\n            clonedButton.innerHTML =\n                '<span aria-hidden=\"true\" class=\"ui_v5-button-icon icon-font-chess best\"></span> <span>Lichess</span>';\n        }\n        else if (clonedButton.classList.contains(\"game-over-review-button-background\")) {\n            const parent = clonedButton.parentElement;\n            const label = parent === null || parent === void 0 ? void 0 : parent.querySelector(\".game-over-review-button-label\");\n            if (label) {\n                label.textContent = \"Lichess Analysis\";\n                const observer = new MutationObserver((mutations) => {\n                    mutations.forEach((mutation) => {\n                        if (mutation.type === \"childList\" ||\n                            mutation.type === \"characterData\") {\n                            const currentText = label.textContent;\n                            if (currentText !== \"Lichess Analysis\") {\n                                label.textContent = \"Lichess Analysis\";\n                            }\n                        }\n                    });\n                });\n                observer.observe(label, {\n                    childList: true,\n                    characterData: true,\n                    subtree: true,\n                });\n            }\n        }\n    }\n    else {\n        throw new Error(\"button not found\");\n    }\n};\nlet stopObs = false;\nconst gameEndObserver = new MutationObserver((mutations, observer) => {\n    var _a, _b;\n    const gameReviewButton = document.querySelector('[data-cy=\"sidebar-game-review-button\"]');\n    const popUpReviewButton = document.querySelector(\".ui_v5-button-component.ui_v5-button-primary.ui_v5-button-large.ui_v5-button-full.game-over-review-button-background\");\n    if (gameReviewButton && !((_a = gameReviewButton.textContent) === null || _a === void 0 ? void 0 : _a.includes(\"Lichess\"))) {\n        disableButton(gameReviewButton);\n        setTimeout(() => {\n            hijackButton(gameReviewButton);\n        }, 0);\n    }\n    if (popUpReviewButton && !stopObs) {\n        disableButton(popUpReviewButton);\n        setTimeout(() => {\n            hijackButton(popUpReviewButton);\n        }, 0);\n    }\n    if (((_b = gameReviewButton === null || gameReviewButton === void 0 ? void 0 : gameReviewButton.textContent) === null || _b === void 0 ? void 0 : _b.includes(\"Lichess\")) && popUpReviewButton) {\n        stopObs = true;\n        ready = true;\n    }\n});\nconst lichess = (def = true) => {\n    const shareButton = def\n        ? document.querySelector(\".icon-font-chess.share.live-game-buttons-button\")\n        : document.querySelector('button[aria-label=\"Share\"]');\n    if (!shareButton) {\n        alert(\"Error: Unable to find PGN...\");\n        return;\n    }\n    setTimeout(() => {\n        shareButton.click();\n        const checkPGN = () => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            const PGNElement = document.querySelector(\".share-menu-tab-pgn-textarea\");\n            if (PGNElement) {\n                const closeButton = document.querySelector(\"div.icon-font-chess.x.ui_outside-close-icon\");\n                const black = document.getElementsByClassName(\"board flipped\").length > 0;\n                let move = (_b = (_a = document.getElementsByClassName(\"vertical-move-list\")[0]) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(\"selected\")[0]) === null || _b === void 0 ? void 0 : _b.dataset.ply;\n                if (!move) {\n                    const moveData = (_f = (_e = (_d = (_c = document.querySelector(\"wc-horizontal-move-list\")) === null || _c === void 0 ? void 0 : _c.querySelector('[class*=\"node-highlight-content\"][class*=\"selected\"]')) === null || _d === void 0 ? void 0 : _d.parentElement) === null || _e === void 0 ? void 0 : _e.dataset.node) === null || _f === void 0 ? void 0 : _f.split('-');\n                    move = moveData && moveData[0] === '0' ? String(parseInt(moveData[1], 10) + 1) : '0';\n                }\n                closeButton === null || closeButton === void 0 ? void 0 : closeButton.click();\n                try {\n                    const formatted = parser(PGNElement.value);\n                    const link = `https://lichess.org/analysis/pgn/` +\n                        formatted +\n                        (black ? \"?color=black\" : \"\") + `#${move}`;\n                    (_g = window.open(link, \"_blank\")) === null || _g === void 0 ? void 0 : _g.focus();\n                }\n                catch (error) {\n                    isLichessInProgress = false;\n                    alert(\"Error: Something went wrong...\");\n                    throw new Error(\"Couldn't open new page\");\n                }\n            }\n            else {\n                setTimeout(checkPGN, 100);\n            }\n        };\n        checkPGN();\n    }, 100);\n    isLichessInProgress = false;\n};\ngameEndObserver.observe(document.body, { childList: true, subtree: true });\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\n    if (msg.type === \"live\") {\n        if (ready) {\n            lichess();\n        }\n        sendResponse({ success: true });\n    }\n    else if (msg.type === \"events\") {\n        const button = document.querySelector('button[aria-label=\"Share\"]');\n        if (button) {\n            lichess(false);\n        }\n        else {\n            alert(\"Error: PGN not found. Try again in a moment if you believe this is an error\");\n        }\n    }\n    return true;\n});\n"],"names":[],"sourceRoot":""}